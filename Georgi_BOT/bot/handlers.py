from aiogram import Router, F
from aiogram import Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from bot.db_creation import get_user_name, insert_user, update_user, save_feedback, save_diary_entry
from bot.keyboard import create_dynamic_menu
from bot.inline_handlers import router as inline_router
from bot.LLM import get_response
from bot.Fsm import UserState
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from datetime import datetime

router = Router()
scheduler = AsyncIOScheduler()

async def send_notify(user_id: int, bot: Bot):
    user = await get_user_name(user_id)
    await bot.send_message(user_id, f"üôã {user}, –¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è? –ú–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å!")

@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await get_user_name(user_id)

    if user:
        username, chat_enabled = user
        await message.answer(
            f"üëã –†–∞–¥ –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞, {username}!",
            reply_markup=create_dynamic_menu(chat_enabled)
        )
    else:
        await insert_user(user_id, {"name": None, "chat_enabled": False})
        await message.answer("ü§ù –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?")
        await state.set_state(UserState.waiting_for_name)

    bot = message.bot
    scheduler.add_job(
        send_notify, 
        trigger=IntervalTrigger(hours=24),
        args=[user_id, bot],
        max_instances=1
    )
    scheduler.start()

@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def change_username_prompt(message: Message, state: FSMContext):
    await state.set_state(UserState.waiting_for_name)
    await message.reply("üôå –ö–∞–∫ –í–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å?")

@router.message(UserState.waiting_for_name)
async def change_username(message: Message, state: FSMContext):
    new_username = message.text
    user_id = message.from_user.id

    await update_user(user_id, {"name": new_username})
    await message.reply(f"–û—Ç–ª–∏—á–Ω–æ, {new_username}!")
    await state.clear()

@router.message(Command("review"))
async def feedback_handler(message: Message, state: FSMContext):
    await state.set_state(UserState.waiting_for_feedback)
    await message.reply("‚úçÔ∏è –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤:")

@router.message(UserState.waiting_for_feedback)
async def save_feedback_handler(message: Message, state: FSMContext):
    feedback_text = message.text
    user_id = message.from_user.id

    await save_feedback(user_id, feedback_text)
    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    
    await state.clear()

@router.message(Command("information"))
async def information_handler(message: Message):
    instruction_text = (
        "|-–ö–∞–∫ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?\n\n"
        "|-- /start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "|-- /information ‚Äî –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
        "|-- /review ‚Äî –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
        "|-- '–í–∫–ª—é—á–∏—Ç—å —á–∞—Ç'-'–í—ã–∫–ª—é—á–∏—Ç—å —á–∞—Ç' ‚Äî –û–±—â–µ–Ω–∏–µ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –º–æ–∑–≥–∞\n"
        "|-- '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è' ‚Äî –°–º–µ–Ω–∞ –∏–º–µ–Ω–∏\n"
        "|-- '–û–ø—Ü–∏–∏' ‚Äî –£–∑–Ω–∞—Ç—å —Ü–∏—Ç–∞—Ç—É –∏ —Å–æ–≤–µ—Ç –¥–Ω—è\n"
    )
    await message.answer(instruction_text)

@router.message(F.text == "–í–∫–ª—é—á–∏—Ç—å —á–∞—Ç")
async def chat_start_handler(message: Message):
    user_id = message.from_user.id
    await update_user(user_id, {"chat_enabled": True})
    await message.answer("‚úÖ –ß–∞—Ç –≤–∫–ª—é—á–µ–Ω!", reply_markup=create_dynamic_menu(True))

@router.message(F.text == "–í—ã–∫–ª—é—á–∏—Ç—å —á–∞—Ç")
async def chat_end_handler(message: Message):
    user_id = message.from_user.id
    await update_user(user_id, {"chat_enabled": False})
    await message.answer("‚ùå –ß–∞—Ç –≤—ã–∫–ª—é—á–µ–Ω, –±—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞!", reply_markup=create_dynamic_menu(False))

@router.message(F.text == "–û–ø—Ü–∏–∏")
async def show_options_handler(message: Message):
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫", callback_data="option1")],
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏", callback_data="option2")]
    ])
    await message.answer("üôà –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", reply_markup=inline_keyboard)

@router.message()
async def conversation_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await get_user_name(user_id)

    if user and user[1]:
        user_message = message.text
        model_response = get_response(user_message)
        await message.answer(model_response)

    elif await state.get_state() == UserState.waiting_for_physical_exercise.state:
        await state.update_data(physical_exercise=message.text)
        await state.set_state(UserState.waiting_for_cognitive_exercise)
        await message.answer("üßò –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ.")

    elif await state.get_state() == UserState.waiting_for_cognitive_exercise.state:
        await state.update_data(cognitive_exercise=message.text)
        await state.set_state(UserState.waiting_for_effect)
        await message.answer("ü§ß –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ.")

    elif await state.get_state() == UserState.waiting_for_effect.state:
        user_data = await state.get_data()
        physical_exercise = user_data.get("physical_exercise")
        cognitive_exercise = user_data.get("cognitive_exercise")

        entry_date = datetime.now().strftime("%Y-%m-%d")
        await save_diary_entry(
            user_id=user_id,
            physical_exercise=physical_exercise,
            cognitive_exercise=cognitive_exercise,
            effect=message.text
        )

        await message.answer(f"‚úÖ –î–Ω–µ–≤–Ω–∏–∫ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {entry_date}!\n")
        await state.clear()

    else:
        await message.answer("‚ÄºÔ∏è –í—ã –Ω–µ –≤ —á–∞—Ç–µ —Å–µ–π—á–∞—Å. –í–∫–ª—é—á–∏—Ç–µ —á–∞—Ç!")

router.include_router(inline_router)
